"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  default: () => src_default
});
module.exports = __toCommonJS(src_exports);

// src/withExportImages.ts
var import_node_path = __toESM(require("path"));
var import_ansi_colors = __toESM(require("ansi-colors"));
var import_app_root_path = __toESM(require("app-root-path"));
var import_fs_extra = __toESM(require("fs-extra"));
var withExportImages = async (nextConfig = {}, options = {}) => {
  if (nextConfig.images?.unoptimized) {
    throw Error(
      "The `images.unoptimized` is not supported. If you use this option, consider not using `next-export-optimize-images`."
    );
  }
  const resolvedConfigPathOfDefault = import_node_path.default.join(process.cwd(), "export-images.config.js");
  const resolvedConfigPathOfCjs = import_node_path.default.join(process.cwd(), "export-images.config.cjs");
  const existConfigOfDefault = import_fs_extra.default.existsSync(resolvedConfigPathOfDefault);
  const existConfigOfCjs = import_fs_extra.default.existsSync(resolvedConfigPathOfCjs);
  const resolvedConfigPath = existConfigOfDefault ? resolvedConfigPathOfDefault : existConfigOfCjs ? resolvedConfigPathOfCjs : null;
  const destConfigPath = import_app_root_path.default.resolve("node_modules/next-export-optimize-images/export-images.config.js");
  let config = {};
  if (resolvedConfigPath !== null) {
    const configSrc = require(resolvedConfigPath);
    config = configSrc;
    if (configSrc.remoteImages) {
      if (typeof configSrc.remoteImages === "function") {
        config.remoteImages = await configSrc.remoteImages();
      }
    }
  }
  import_fs_extra.default.ensureFileSync(destConfigPath);
  import_fs_extra.default.writeFileSync(
    destConfigPath,
    `module.exports = ${JSON.stringify(
      config,
      (k, v) => {
        if (k === "filenameGenerator" || k === "sourceImageParser") {
          return v.toString();
        }
        return v;
      },
      2
    )}`
  );
  console.log(
    import_ansi_colors.default.magenta(
      `info - [next-export-optimize-images]: ${resolvedConfigPath !== null ? `Configuration loaded from \`${resolvedConfigPath}\`.` : "Configuration was not loaded. (This is optional.)"}`
    )
  );
  const customConfig = {
    webpack(config2, option) {
      const nextImageLoader = config2.module.rules.find(
        ({ loader }) => loader === "next-image-loader"
      );
      config2.module.rules = [
        ...config2.module.rules.filter(({ loader }) => loader !== "next-image-loader"),
        {
          ...nextImageLoader,
          loader: void 0,
          options: void 0,
          use: [
            {
              loader: "next-export-optimize-images-loader",
              options: {
                dir: import_node_path.default.join(process.cwd(), options.__test ? "__tests__/e2e" : ""),
                isDev: option.dev
              }
            },
            { loader: nextImageLoader.loader, options: nextImageLoader.options }
          ]
        }
      ];
      config2.resolveLoader.alias["next-export-optimize-images-loader"] = options.__test ? import_node_path.default.join(__dirname, "loader") : "next-export-optimize-images/dist/loader";
      return nextConfig.webpack ? nextConfig.webpack(config2, option) : config2;
    },
    images: {
      ...nextConfig.images,
      loader: nextConfig.images?.loader ?? "custom"
    }
  };
  return Object.assign({}, nextConfig, customConfig);
};
var withExportImages_default = withExportImages;

// src/index.ts
var src_default = withExportImages_default;
module.exports = withExportImages_default;
//# sourceMappingURL=index.js.map