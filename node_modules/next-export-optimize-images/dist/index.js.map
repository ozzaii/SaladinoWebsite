{"version":3,"sources":["../src/index.ts","../src/withExportImages.ts"],"sourcesContent":["import withExportImages from './withExportImages'\n\nexport type { Config } from './utils/getConfig'\n\nexport default withExportImages\nmodule.exports = withExportImages\n","import path from 'node:path'\nimport colors from 'ansi-colors'\nimport appRootPath from 'app-root-path'\nimport fs from 'fs-extra'\nimport type { NextConfig } from 'next'\nimport type { Config } from './utils/getConfig'\n\nconst withExportImages = async (\n  nextConfig: NextConfig = {},\n  options: { __test?: boolean } = {}\n): Promise<NextConfig> => {\n  if (nextConfig.images?.unoptimized) {\n    throw Error(\n      'The `images.unoptimized` is not supported. If you use this option, consider not using `next-export-optimize-images`.'\n    )\n  }\n\n  const resolvedConfigPathOfDefault = path.join(process.cwd(), 'export-images.config.js')\n  const resolvedConfigPathOfCjs = path.join(process.cwd(), 'export-images.config.cjs')\n  const existConfigOfDefault = fs.existsSync(resolvedConfigPathOfDefault)\n  const existConfigOfCjs = fs.existsSync(resolvedConfigPathOfCjs)\n  const resolvedConfigPath = existConfigOfDefault\n    ? resolvedConfigPathOfDefault\n    : existConfigOfCjs\n      ? resolvedConfigPathOfCjs\n      : null\n  const destConfigPath = appRootPath.resolve('node_modules/next-export-optimize-images/export-images.config.js')\n\n  let config: Config = {}\n  if (resolvedConfigPath !== null) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const configSrc = require(resolvedConfigPath) as Config\n    config = configSrc\n    if (configSrc.remoteImages) {\n      if (typeof configSrc.remoteImages === 'function') {\n        config.remoteImages = await configSrc.remoteImages()\n      }\n    }\n  }\n\n  fs.ensureFileSync(destConfigPath)\n  fs.writeFileSync(\n    destConfigPath,\n    `module.exports = ${JSON.stringify(\n      config,\n      (k, v) => {\n        if (k === 'filenameGenerator' || k === 'sourceImageParser') {\n          return v.toString()\n        }\n        return v\n      },\n      2\n    )}`\n  )\n\n  // eslint-disable-next-line no-console\n  console.log(\n    colors.magenta(\n      `info - [next-export-optimize-images]: ${\n        resolvedConfigPath !== null\n          ? `Configuration loaded from \\`${resolvedConfigPath}\\`.`\n          : 'Configuration was not loaded. (This is optional.)'\n      }`\n    )\n  )\n\n  const customConfig: NextConfig = {\n    webpack(config, option) {\n      const nextImageLoader = config.module.rules.find(\n        ({ loader }: { loader?: string }) => loader === 'next-image-loader'\n      )\n\n      config.module.rules = [\n        ...config.module.rules.filter(({ loader }: { loader?: string }) => loader !== 'next-image-loader'),\n        {\n          ...nextImageLoader,\n          loader: undefined,\n          options: undefined,\n          use: [\n            {\n              loader: 'next-export-optimize-images-loader',\n              options: {\n                dir: path.join(process.cwd(), options.__test ? '__tests__/e2e' : ''),\n                isDev: option.dev,\n              },\n            },\n            { loader: nextImageLoader.loader, options: nextImageLoader.options },\n          ],\n        },\n      ]\n\n      config.resolveLoader.alias['next-export-optimize-images-loader'] = options.__test\n        ? path.join(__dirname, 'loader')\n        : 'next-export-optimize-images/dist/loader'\n\n      return nextConfig.webpack ? nextConfig.webpack(config, option) : config\n    },\n    images: {\n      ...nextConfig.images,\n      loader: nextConfig.images?.loader ?? 'custom',\n    },\n  }\n\n  return Object.assign({}, nextConfig, customConfig)\n}\n\nexport default withExportImages\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,uBAAiB;AACjB,yBAAmB;AACnB,2BAAwB;AACxB,sBAAe;AAIf,IAAM,mBAAmB,OACvB,aAAyB,CAAC,GAC1B,UAAgC,CAAC,MACT;AACxB,MAAI,WAAW,QAAQ,aAAa;AAClC,UAAM;AAAA,MACJ;AAAA,IACF;AAAA,EACF;AAEA,QAAM,8BAA8B,iBAAAA,QAAK,KAAK,QAAQ,IAAI,GAAG,yBAAyB;AACtF,QAAM,0BAA0B,iBAAAA,QAAK,KAAK,QAAQ,IAAI,GAAG,0BAA0B;AACnF,QAAM,uBAAuB,gBAAAC,QAAG,WAAW,2BAA2B;AACtE,QAAM,mBAAmB,gBAAAA,QAAG,WAAW,uBAAuB;AAC9D,QAAM,qBAAqB,uBACvB,8BACA,mBACE,0BACA;AACN,QAAM,iBAAiB,qBAAAC,QAAY,QAAQ,kEAAkE;AAE7G,MAAI,SAAiB,CAAC;AACtB,MAAI,uBAAuB,MAAM;AAE/B,UAAM,YAAY,QAAQ,kBAAkB;AAC5C,aAAS;AACT,QAAI,UAAU,cAAc;AAC1B,UAAI,OAAO,UAAU,iBAAiB,YAAY;AAChD,eAAO,eAAe,MAAM,UAAU,aAAa;AAAA,MACrD;AAAA,IACF;AAAA,EACF;AAEA,kBAAAD,QAAG,eAAe,cAAc;AAChC,kBAAAA,QAAG;AAAA,IACD;AAAA,IACA,oBAAoB,KAAK;AAAA,MACvB;AAAA,MACA,CAAC,GAAG,MAAM;AACR,YAAI,MAAM,uBAAuB,MAAM,qBAAqB;AAC1D,iBAAO,EAAE,SAAS;AAAA,QACpB;AACA,eAAO;AAAA,MACT;AAAA,MACA;AAAA,IACF,CAAC;AAAA,EACH;AAGA,UAAQ;AAAA,IACN,mBAAAE,QAAO;AAAA,MACL,yCACE,uBAAuB,OACnB,+BAA+B,kBAAkB,QACjD,mDACN;AAAA,IACF;AAAA,EACF;AAEA,QAAM,eAA2B;AAAA,IAC/B,QAAQC,SAAQ,QAAQ;AACtB,YAAM,kBAAkBA,QAAO,OAAO,MAAM;AAAA,QAC1C,CAAC,EAAE,OAAO,MAA2B,WAAW;AAAA,MAClD;AAEA,MAAAA,QAAO,OAAO,QAAQ;AAAA,QACpB,GAAGA,QAAO,OAAO,MAAM,OAAO,CAAC,EAAE,OAAO,MAA2B,WAAW,mBAAmB;AAAA,QACjG;AAAA,UACE,GAAG;AAAA,UACH,QAAQ;AAAA,UACR,SAAS;AAAA,UACT,KAAK;AAAA,YACH;AAAA,cACE,QAAQ;AAAA,cACR,SAAS;AAAA,gBACP,KAAK,iBAAAJ,QAAK,KAAK,QAAQ,IAAI,GAAG,QAAQ,SAAS,kBAAkB,EAAE;AAAA,gBACnE,OAAO,OAAO;AAAA,cAChB;AAAA,YACF;AAAA,YACA,EAAE,QAAQ,gBAAgB,QAAQ,SAAS,gBAAgB,QAAQ;AAAA,UACrE;AAAA,QACF;AAAA,MACF;AAEA,MAAAI,QAAO,cAAc,MAAM,oCAAoC,IAAI,QAAQ,SACvE,iBAAAJ,QAAK,KAAK,WAAW,QAAQ,IAC7B;AAEJ,aAAO,WAAW,UAAU,WAAW,QAAQI,SAAQ,MAAM,IAAIA;AAAA,IACnE;AAAA,IACA,QAAQ;AAAA,MACN,GAAG,WAAW;AAAA,MACd,QAAQ,WAAW,QAAQ,UAAU;AAAA,IACvC;AAAA,EACF;AAEA,SAAO,OAAO,OAAO,CAAC,GAAG,YAAY,YAAY;AACnD;AAEA,IAAO,2BAAQ;;;ADtGf,IAAO,cAAQ;AACf,OAAO,UAAU;","names":["path","fs","appRootPath","colors","config"]}