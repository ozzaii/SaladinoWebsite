{"version":3,"sources":["../../../src/components/client/image.tsx","../../../src/components/utils/getStringSrc.ts","../../../src/utils/formatValidate.ts","../../../src/utils/buildOutputInfo.ts","../../../src/utils/getConfig.ts","../../../src/components/utils/imageLoader.ts","../../../src/components/utils/getOptimizedImageProps.ts"],"sourcesContent":["import Image, { type ImageProps } from 'next/image'\nimport React, { forwardRef } from 'react'\nimport getStringSrc from '../utils/getStringSrc'\nimport imageLoader from '../utils/imageLoader'\n\nconst CustomImage = forwardRef<HTMLImageElement, ImageProps>((props, forwardedRef) => {\n  const srcStr = getStringSrc(props.src)\n  const blurDataURLObj = props.blurDataURL\n    ? { blurDataURL: props.blurDataURL }\n    : typeof props.src === 'string' && props.placeholder === 'blur' && props.loader === undefined\n      ? { blurDataURL: imageLoader()({ src: props.src, width: 8, quality: 10 }) }\n      : {}\n\n  return (\n    <Image\n      {...props}\n      ref={forwardedRef}\n      loader={props.loader || imageLoader()}\n      unoptimized={props.unoptimized !== undefined ? props.unoptimized : srcStr.endsWith('.svg')}\n      {...blurDataURLObj}\n    />\n  )\n})\nCustomImage.displayName = 'CustomImage'\n\nexport { default as getOptimizedImageProps } from '../utils/getOptimizedImageProps'\nexport default CustomImage\n","import type { ImageProps, StaticImageData } from 'next/dist/shared/lib/image-external'\n\ntype StaticRequire = {\n  default: StaticImageData\n}\n\nconst getStringSrc = (imgSrc: ImageProps['src']) => {\n  return typeof imgSrc === 'string'\n    ? imgSrc\n    : (imgSrc as StaticRequire).default !== undefined\n      ? (imgSrc as StaticRequire).default.src\n      : (imgSrc as StaticImageData).src\n}\n\nexport default getStringSrc\n","const formats = ['jpeg', 'jpg', 'png', 'webp', 'avif'] as const\nexport type AllowedFormat = (typeof formats)[number]\n\nconst formatValidate = (format?: string): format is AllowedFormat =>\n  formats.some((allowedFormat) => allowedFormat === format)\n\nexport default formatValidate\n","import formatValidate from './formatValidate'\nimport type { Config, DefaultImageParser } from './getConfig'\n\nexport const defaultImageParser: DefaultImageParser = (src: string) => {\n  const path = src.split(/\\.([^.]*$)/)[0]\n  const extension = (src.split(/\\.([^.]*$)/)[1] || '').split('?')[0]\n\n  if (!path || !extension) {\n    throw new Error(`Invalid path or no file extension: ${src}`)\n  }\n\n  let pathWithoutName = path.split('/').slice(0, -1).join('/')\n  const name = path.split('/').slice(-1).toString()\n\n  if (src.startsWith('http')) {\n    pathWithoutName = pathWithoutName\n      .replace(/^https?:\\/\\//, '')\n      .split('/')\n      .slice(1)\n      .join('/')\n  }\n\n  return {\n    pathWithoutName,\n    name,\n    extension,\n  }\n}\n\ntype BuildOutputInfoArgs = {\n  src: string\n  width: number\n  config: Config\n}\n\nconst buildOutputInfo = ({ src: _src, width, config }: BuildOutputInfoArgs) => {\n  let src = _src\n\n  if (config.basePath !== undefined) {\n    src = _src.replace(config.basePath, '')\n  }\n\n  const parsedImageInformation = config.sourceImageParser\n    ? config.sourceImageParser({ src, defaultParser: defaultImageParser })\n    : defaultImageParser(src)\n\n  let { extension } = parsedImageInformation\n  const { pathWithoutName, name, extension: originalExtension } = parsedImageInformation\n\n  if (config.convertFormat !== undefined) {\n    const convertArray = config.convertFormat.find(([beforeConvert]) => beforeConvert === extension)\n    if (convertArray !== undefined) {\n      if (!formatValidate(convertArray[0]))\n        throw Error(`Unauthorized format specified in \\`configFormat\\`. beforeConvert: ${convertArray[0]}`)\n      if (!formatValidate(convertArray[1]))\n        throw Error(`Unauthorized format specified in \\`configFormat\\`. afterConvert: ${convertArray[1]}`)\n\n      extension = convertArray[1]\n    }\n  }\n\n  const outputDir = `/${\n    config.imageDir ? config.imageDir.replace(/^\\//, '').replace(/\\/$/, '') : '_next/static/chunks/images'\n  }`\n\n  const extensions = [...new Set([...(config.generateFormats ?? ['webp']), extension])]\n  return extensions.map((extension, index) => {\n    if (extensions.length !== index + 1 && !formatValidate(extension))\n      throw Error(`Unauthorized extension specified in \\`generateFormats\\`: ${extension}`)\n\n    const filename =\n      config.filenameGenerator !== undefined\n        ? config.filenameGenerator({ path: pathWithoutName, name, width, extension })\n        : `${pathWithoutName}/${name}_${width}.${extension}`\n    const output = `${outputDir}/${filename.replace(/^\\//, '')}`\n\n    return { output, src, extension, originalExtension }\n  })\n}\n\nexport default buildOutputInfo\n","import type { AvifOptions, JpegOptions, PngOptions, WebpOptions } from 'sharp'\nimport type { AllowedFormat } from './formatValidate'\n\ntype ParsedImageInfo = {\n  pathWithoutName: string\n  name: string\n  extension: string\n}\nexport type DefaultImageParser = (src: string) => ParsedImageInfo\ntype SourceImageParser = (determinerProps: { src: string; defaultParser: DefaultImageParser }) => ParsedImageInfo\n\nexport type Config = {\n  /**\n   * Specify if you are customizing the default output directory, such as next export -o outDir.\n   *\n   * @type {string}\n   */\n  outDir?: string\n  /**\n   * You can customize the directory to output optimized images.\n   * The default is '_next/static/chunks/images'.\n   *\n   * @type {string}\n   */\n  imageDir?: string\n  /**\n   * You can customize the directory to cache images.\n   * The default is 'node_modules/.cache'.\n   *\n   * @type {string}\n   */\n  cacheDir?: string\n  /**\n   * Images in the public directory are automatically optimized, but if there are any images you want to ignore the optimization for, please specify the path.\n   * Please specify a relative path from the public directory.\n   */\n  ignorePaths?: string[]\n  /**\n   * Required if you have set basePath in next.config.js.\n   * Please set the same value.\n   *\n   * @type {string}\n   */\n  basePath?: string\n  /**\n   * You can customize the directory to output downloaded external images.\n   * The default is '_next/static/media'\n   *\n   * @type {string}\n   */\n  externalImageDir?: string\n  /**\n   * You can customize the quality of the optimized image.\n   * The default is 75.\n   */\n  quality?: number\n  /**\n   * You can customize the generation of file names.\n   *\n   * ❗️Attention\n   * When making this setting, make sure that the file names (including the path part) of different images do not cover each other.\n   * Specifically, include the name, width, and extension in the return value. If path is not included, all src's should be specified with import or require so that they can be distinguished by their hash value even if they have the same filename.\n   *\n   * @type {({ path: string, name: string, width: number, extension: string }) => string}\n   */\n  filenameGenerator?: (generatorProps: { path: string; name: string; width: number; extension: string }) => string\n  /**\n   * You can set optimization options for each extension.\n   * Please refer to the official sharp documentation for more information.\n   *\n   * @type {{ png?: PngOptions, jpg?: JpegOptions, webp?: WebpOptions, avif?: AvifOptions } }}\n   */\n  sharpOptions?: {\n    png?: PngOptions\n    jpg?: JpegOptions\n    webp?: WebpOptions\n    avif?: AvifOptions\n  }\n  /**\n   * It allows you to convert images from any extension to another extension.\n   *\n   * @type {[beforeConvert: AllowedFormat, afterConvert: AllowedFormat][]}\n   */\n  convertFormat?: [beforeConvert: AllowedFormat, afterConvert: AllowedFormat][]\n\n  /**\n   * You can generate extra images in extensions specified.\n   * The default is ['webp'].\n   * This setting affects the extension displayed in the `Picture` component.\n   * The order is also important. For example, if `webp` is first, then `webp` will be displayed first.\n   *\n   * @type {('webp' | 'avif')[]}\n   */\n  generateFormats?: ('webp' | 'avif')[]\n\n  /**\n   * Allows you to optionally override the parsed image information before optimized images.\n   *\n   * @type {SourceImageParser}\n   */\n  sourceImageParser?: SourceImageParser\n\n  /**\n   * You can directly specify the URL of an external image.\n   * This is useful in cases where it is not known what images will be used for the build using variables, for example.\n   *\n   * @type {string[] | (() => string[] | Promise<string[]>)}\n   */\n  remoteImages?: string[] | (() => string[] | Promise<string[]>)\n\n  /**\n   * In case you need to download a large amount of images from an external CDN with a rate limit, this will add delays between downloading images.\n   */\n  remoteImagesDownloadsDelay?: number\n\n  /**\n   * You can specify the mode to use. The default is 'export'.\n   * 'build' mode is for use with `next build` and `next start`.\n   *\n   * @type {('build' | 'export')}\n   */\n  mode?: 'build' | 'export'\n}\n\ntype ResolvedConfig = Config & {\n  remoteImages?: string[]\n}\n\nconst getConfig = (): ResolvedConfig => {\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const config = require('next-export-optimize-images/export-images.config.js') as Omit<\n    ResolvedConfig,\n    'filenameGenerator' | 'sourceImageParser'\n  > & {\n    filenameGenerator?: string\n    sourceImageParser?: string\n  }\n\n  return {\n    ...config,\n    filenameGenerator: config.filenameGenerator\n      ? Function(`\"use strict\";return (${config.filenameGenerator})`)()\n      : undefined,\n    sourceImageParser: config.sourceImageParser\n      ? Function(`\"use strict\";return (${config.sourceImageParser})`)()\n      : undefined,\n  }\n}\n\nexport default getConfig\n","import type { ImageLoaderProps } from 'next/dist/shared/lib/image-external'\nimport buildOutputInfo from '../../utils/buildOutputInfo'\nimport getConfig from '../../utils/getConfig'\n\nconst config = getConfig()\n\nconst imageLoader =\n  (getNumber?: number) =>\n  ({ src, width }: ImageLoaderProps) => {\n    if (process.env.NODE_ENV === 'development') {\n      // This doesn't bother optimizing in the dev environment. Next complains if the\n      // returned URL doesn't have a width in it, so adding it as a throwaway\n      return `${src}?width=${width}`\n    }\n\n    const outputInfo = buildOutputInfo({ src, width, config }).at(getNumber ?? -1)\n\n    if (outputInfo === undefined) {\n      throw new Error(`No output info found for ${src}`)\n    }\n\n    return `${config.basePath ?? ''}${outputInfo.output}`\n  }\n\nexport default imageLoader\n","import { type ImageProps, getImageProps } from 'next/image'\nimport getStringSrc from './getStringSrc'\nimport imageLoader from './imageLoader'\n\nexport type ImgProps = ReturnType<typeof getImageProps>\n\nconst getOptimizedImageProps = (props: ImageProps): ImgProps => {\n  const srcStr = getStringSrc(props.src)\n\n  return getImageProps({\n    ...props,\n    loader: props.loader || imageLoader(),\n    ...(props.blurDataURL\n      ? { blurDataURL: props.blurDataURL }\n      : typeof props.src === 'string' && props.placeholder === 'blur' && props.loader === undefined\n        ? { blurDataURL: imageLoader()({ src: props.src, width: 8, quality: 10 }) }\n        : {}),\n    unoptimized: props.unoptimized !== undefined ? props.unoptimized : srcStr.endsWith('.svg'),\n  })\n}\n\nexport default getOptimizedImageProps\n"],"mappings":"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","names":["import_image","config","extension","config","React","Image"]}